# Clonamos el repositorio de keras-retinanet
!git clone https://github.com/DavidReveloLuna/keras-retinanet.git

!pip uninstall keras -y
!pip uninstall keras-nightly -y
!pip uninstall keras-Preprocessing -y
!pip uninstall keras-vis -y
!pip uninstall tensorflow -y
!pip uninstall h5py

!pip install tensorflow==2.1.0
!pip install keras==2.3.1
!pip install h5py==2.10.0

cd keras-retinanet/

# Instalación y configuración de keras-retinet

!pip install .

!python setup.py build_ext --inplace

# Montar tu drive
from google.colab import drive
drive.mount('/content/drive')

# Copiamos los archivos que necesitamos para el entrenamiento
# Asegúrate de reemplazar la dirección con tu propio path (/content/drive/My Drive/Desarrollos/Hand Detection/) 
!cp -r "/content/drive/My Drive/Desarrollos/Hand Detection/images" "/content/keras-retinanet"
!cp -r "/content/drive/My Drive/Desarrollos/Hand Detection/annotations.csv" "/content/keras-retinanet"
!cp -r "/content/drive/My Drive/Desarrollos/Hand Detection/annotations_test.csv" "/content/keras-retinanet"
!cp -r "/content/drive/My Drive/Desarrollos/Hand Detection/classes.csv" "/content/keras-retinanet" 

# Librerias

import numpy as np
import pandas as pd
import seaborn as sns
from pylab import rcParams
import matplotlib.pyplot as plt
from matplotlib import rc
from pandas.plotting import register_matplotlib_converters
from sklearn.model_selection import train_test_split
import urllib
import os
import csv
import cv2
import time
from PIL import Image

from tensorflow.keras.models import load_model
from keras_retinanet import models
from keras_retinanet.utils.image import read_image_bgr, preprocess_image, resize_image
from keras_retinanet.utils.visualization import draw_box, draw_caption
from keras_retinanet.utils.colors import label_color

# Descargamos modelo preentrenado resnet50_coco
URL_MODEL = 'https://github.com/fizyr/keras-retinanet/releases/download/0.5.1/resnet50_coco_best_v2.1.0.h5'
urllib.request.urlretrieve(URL_MODEL, './snapshots/model.h5')

# Entrenamos el modelo
!chmod 777 keras_retinanet/bin/*
!keras_retinanet/bin/train.py --freeze-backbone --random-transform --weights snapshots/model.h5 --batch-size 8 --steps 200 --epochs 50 csv annotations.csv classes.csv
#!keras_retinanet/bin/train.py --freeze-backbone --random-transform --weights snapshots/resnet50_csv_21.h5 --batch-size 8 --steps 500 --epochs 50 csv annotations.csv classes.csv

# Con el modelo ya entrenado vamos a realizar predicciones
# Cargamos el modelo entrenado, y lo configuramos para que sea compatible con retinanet
model_path = os.path.join('snapshots', sorted(os.listdir('snapshots'), reverse=True)[0])
print(model_path)

model = models.load_model(model_path, backbone_name='resnet50')
model = models.convert_model(model)

# Cargamos el archivo que contiene las etiquetas de las clases
labels_to_names = pd.read_csv('classes.csv', header=None).T.loc[0].to_dict()

# Cargamos el archivo que contiene la información del dataset de prueba (annotations_test.csv)
test_df = pd.read_csv("annotations_test.csv")
test_df.head()


# Obtenemos la predicción del modelo: boxes, scores, labels
import skimage.io as io

def predict(image):
  image = preprocess_image(image.copy())
  image, scale = resize_image(image)

  boxes, scores, labels = model.predict_on_batch(
    np.expand_dims(image, axis=0)
  )

  boxes /= scale

  return boxes, scores, labels


# Mostramos los objetos encontrardos en la imagen
# Se toman encuenta sólo los objetos que tienen asociada una probabilidad mayor a umbralScore
umbralScore = 0.8

def draw_detections(image, boxes, scores, labels):
  for box, score, label in zip(boxes[0], scores[0], labels[0]):
    if score < umbralScore:
        break

    color = label_color(label)

    b = box.astype(int)
    draw_box(image, b, color=color)

    caption = "{} {:.3f}".format(labels_to_names[label], score)
    draw_caption(image, b, caption)

# Recorremos todo el dataFramee de test para revisar las predicciones
for index, row in test_df.iterrows():
  print(row[0], index)
  image = io.imread(row[0])

  boxes, scores, labels = predict(image)

  draw = image.copy()
  draw_detections(draw, boxes, scores, labels)

  plt.axis('off')
  plt.imshow(draw)
  plt.show()
